apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $.Chart.Name }}-queue"
  namespace: {{ .Values.namespace }}
  labels:
    app: "{{ $.Chart.Name }}"
    service: "{{ $.Chart.Name }}-queue"
spec:
  selector:
    matchLabels:
      app: "{{ $.Chart.Name }}"
      service: "{{ $.Chart.Name }}-queue"
  replicas: {{ .Values.services.app.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: "{{ $.Chart.Name }}"
        service: "{{ $.Chart.Name }}-queue"
    spec:
      imagePullSecrets:
        - name: {{ .Values.services.app.image.pullSecret }}
      containers:
        - name: queue
          image: "{{ .Values.services.app.image.repository }}:{{ .Values.services.app.image.tag }}"
          imagePullPolicy: {{ .Values.services.app.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
            - |
              #!/bin/bash
              set -xe

              until (echo > /dev/tcp/$POSTGRESQL_WEB_DB_HOST/5432) &>/dev/null; do
                sleep 2s
              done
              php /var/www/artisan package:discover;



              echo "Waiting for Redis..."
              until (echo > /dev/tcp/$REDIS_HOST/6379) &>/dev/null; do
                echo "Redis is not available - sleeping"
                sleep 2
              done
              echo "Redis is available"

              echo "Testing Redis connection..."
              php -r "
                try {
                  \$redis = new \Redis();
                  \$redis->connect('$REDIS_HOST', 6379);
                  if ('{{ .Values.services.redis.password }}') {
                    \$redis->auth('{{ .Values.services.redis.password }}');
                  }
                  echo \$redis->ping() ? 'Redis connection successful\n' : 'Redis connection failed\n';
                } catch (\Exception \$e) {
                  echo 'Redis Error: ' . \$e->getMessage() . \"\n\";
                  exit(1);
                }
              "

              echo "Starting Horizon..."
              php /var/www/artisan horizon --verbose --env=production
          lifecycle:
              preStop:
              exec:
                  command: ["php", "/var/www/artisan", "horizon:terminate"]
          resources:
              limits:
              memory: 9216Mi
              cpu: 5
              requests:
              cpu: 120m
              memory: 1024Mi
          envFrom:
              - secretRef:
                  name: "{{ $.Chart.Name }}-secrets"
          env:
            - name: POSTGRESQL_WEB_DB_HOST
              value: "{{ .Values.services.app.POSTGRESQL_WEB_DB_HOST }}"
            - name: PHP_MEMORY_LIMIT
              value: 4096M
            - name: REDIS_PASSWORD
              value: "{{ .Values.services.redis.password }}"
            - name: REDIS_HOST
              value: "{{ .Values.services.redis.host }}"
            - name: CONTAINER_ROLE
              value: queue
            - name: PHP_DISABLED_FUNCTION
              value: "exec, passthru, proc_open, proc_close, shell_exec, show_source, symlink, system"
            - name: QUEUE_CONNECTION
              value: "redis"
          volumeMounts:
            - name: "{{ .Values.namespace }}-web-storage-pv"
              mountPath: {{ .Values.services.app.persistence.mountPath }}
              subPath: "storage"
              readOnly: false
            - name: "{{ .Values.namespace }}-web-storage-pv"
              mountPath: /data
              subPath: data
              readOnly: false
      volumes:
        - name: "{{ .Values.namespace }}-web-storage-pv"
          persistentVolumeClaim:
            claimName: "{{ .Values.namespace }}-web-storage-pvc"
        - name: ssl-certs
          secret:
            secretName: "wildcard-catalystexplorer-tls"
variables:
  AUTO_DEPLOY_IMAGE_VERSION: 'v2.104.0'
  CI_TEMPLATE_REGISTRY_HOST: registry.gitlab.com
  KUBE_CONTEXT: catalystexplorer
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  WEB_BASE_IMAGE_VER:
    value: ""
    description: "New tag for WEB base image,format {version}-{yyyy-mm-dd}. eg: ubuntu-22.04-2024-10-31"


stages:
  - .pre
  # - test
  - build
  - preview
  - mainnet
  - .post

default:
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  before_script:
  - |
    export APP_VERSION=$(awk '/version/{gsub(/("|",)/,"",$2);print $2};' application/package.json)
    export APP_VERSION_AND_BUILD="${APP_VERSION}-${CI_PIPELINE_ID}"
    export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE
    export CI_APPLICATION_TAG=$APP_VERSION_AND_BUILD


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ./node_modules


########## Pre-Build jobs #########
###################################
composer:
  stage: .pre
  image: composer:2.7
  services: []
  retry: 1
  dependencies:
    - yarn
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script: |-
    set -vx
    echo "$ENV_FILE"
    cp "$ENV_FILE" application/.env
    export PATH=$PATH:/usr/local/bin
    cd ./application
    composer install --no-scripts --no-dev --ignore-platform-reqs
  artifacts:
    paths:
      - ./application/public/docs
      - ./application/vendor
    expire_in: 2 days

yarn:
  stage: .pre
  image: node:16.9.0
  services: []
  retry: 1
  needs:
    - composer
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  script: |-
    set -vx
    export PATH=$PATH:/usr/local/bin
    export NODE_OPTIONS=--max-old-space-size=8192
    cd ./application
    yarn install --ignore-engines
    yarn run build
  artifacts:
    paths:
      - ./application/public
    expire_in: 2 days


# pest:
#   stage: test
#   image: composer:2.7
#   cache: {}
#   retry: 1
#   script:
#     - |
#       set -xev

#       make test-backend
      
#   rules:
#     - if: '$CI_COMMIT_BRANCH != "main" && ($DEPLOY_WEBSITE == "True")'
#   dependencies:
#     - composer
#     - yarn

# cypress:
#   stage: test
#   image: docker:24.0.7-dind-alpine3.18
#   cache: {}
#   retry: 1
#   script:
#     - |
#       set -xev

#       docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#   dependencies:
#     - composer
#     - yarn
#   artifacts:
#     when: on_failure
#     paths:
#       - ./application/tests/cypress/videos/**/*.mp4
#       - ./application/tests/cypress/screenshots/**/*.png
#     expire_in: 2 day


########## Helper Scripts ############
######################################
.auto-deploy:
  image: "${CI_TEMPLATE_REGISTRY_HOST}/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  dependencies: []

.setup: &setup
  - apk add --no-cache ca-certificates curl bash openssl git
  - curl -LO https://dl.k8s.io/release/v1.25.9/bin/linux/amd64/kubectl && chmod +x kubectl && mv kubectl /usr/local/bin/kubectl
  - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && chmod 700 get_helm.sh && DESIRED_VERSION=v$HELM_VERSION ./get_helm.sh
  - kubectl config get-contexts
  - kubectl config use-context ${CI_TEMPLATE_REGISTRY_HOST} 

.app: &app_template
  stage: mainnet
  image: "${CI_TEMPLATE_REGISTRY_HOST}/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  retry: 0
  script:
    - auto-deploy check_kube_domain    
    - auto-deploy download_chart
    - auto-deploy create_secret
    - |      
      DEPLOYMENT_NAME="www-catalystexplorer"      
      cp $ENV_FILE ./chart/app_env

      helm upgrade $DEPLOYMENT_NAME ./chart --install \
        -f ./chart/values.yaml \
        --timeout 300s \
        --wait \
        --atomic \
        --set image.repository=$CI_APPLICATION_REPOSITORY/web-app \
        --set image.tag=$CI_APPLICATION_TAG \
        --set services.app.POSTGRESQL_WEB_DB_HOST=$POSTGRESQL_WEB_DB_HOST \
        --set services.meili.MEILISEARCH_KEY=$MEILISEARCH_KEY \
        --set services.app.environment=$APP_ENV \
        --set services.redis.password=$REDIS_PASSWORD \
        --set namespace=${KUBE_NAMESPACE} \
        --namespace="$KUBE_NAMESPACE" \
        --create-namespace
        
    - auto-deploy persist_environment_url
  environment:
    name: mainnet
    url: https://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  artifacts:
    paths: [environment_url.txt]

.db: &db_template
  stage: mainnet
  image: "${CI_TEMPLATE_REGISTRY_HOST}/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  retry: 0
  script:    
    - auto-deploy download_chart    
    - |
      helm repo add bitnami https://charts.bitnami.com/bitnami
      helm repo update

      echo "install db"
      helm upgrade --install \
          --timeout 300s \
          --wait \
          --atomic \
          --namespace="$KUBE_NAMESPACE" \
          --create-namespace \
          -f ./chart/values.db.yaml \
          --set global.postgresql.auth.database="$DB_DATABASE" \
          --set global.postgresql.auth.username="$DB_USERNAME" \
          --set global.postgresql.auth.password="$DB_PASSWORD" \
          --set global.postgresql.auth.postgresPassword="$POSTGRES_PASSWORD" \
          --set primary.persistence.size="80Gi" \
          catalystexplorer-web-db \
          bitnami/postgresql
    - auto-deploy persist_environment_url
  environment:
    name: mainnet
    url: https://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  artifacts:
    paths: [environment_url.txt]

.redis: &redis_template  
  image: "${CI_TEMPLATE_REGISTRY_HOST}/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  retry: 0
  script:    
    - auto-deploy download_chart    
    - |
      helm repo add bitnami https://charts.bitnami.com/bitnami
      helm repo update

      echo "install redis"
      helm upgrade --install \
          --timeout 300s \
          --wait \
          --atomic \
          --namespace="$KUBE_NAMESPACE" \
          --create-namespace \
          -f ./chart/values.redis.yaml \
          --set global.redis.password="$REDIS_PASSWORD" \
          --set auth.password="$REDIS_PASSWORD" \
          --set master.persistence.enabled="true" \
          redis \
          bitnami/redis
    - auto-deploy persist_environment_url
  artifacts:
    paths: [environment_url.txt]


############ Build Jobs ##############
######################################
build_web:
  stage: build
  image: docker:24.0.2-git
  artifacts:
    paths:
      - application/.env
    untracked: true
    when: on_success
    expire_in: "3 days"
  retry: 0
  script:
    - |
      cp "$ENV_FILE" application/.env
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo "Building Dockerfile with tags $CI_APPLICATION_REPOSITORY/web-app:$CI_APPLICATION_TAG and $CI_APPLICATION_REPOSITORY/web-app:latest ..."
      docker build --network host -f ./docker/Dockerfile \
        -t "$CI_APPLICATION_REPOSITORY/web-app:$CI_APPLICATION_TAG" \
        -t "$CI_APPLICATION_REPOSITORY/web-app:latest" .
      docker push "$CI_APPLICATION_REPOSITORY/web-app:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY/web-app:latest"
  only:
    - branches

build_web_base:
    stage: .pre
    image: docker:24.0.2-git
    artifacts:
      paths:
        - application/.env
      untracked: true
      when: on_success
      expire_in: "3 days"
    retry: 0
    script:
      - |
        cp "$ENV_FILE" application/.env
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
        echo "Building Dockerfile with tags $CI_APPLICATION_REPOSITORY/web-app-base:$WEB_BASE_IMAGE_VER and $CI_APPLICATION_REPOSITORY/web-app-base:latest ..."
        docker build --network host -f ./docker/Dockerfile.base \
          -t "$CI_APPLICATION_REPOSITORY/web-app-base:$WEB_BASE_IMAGE_VER" \
          -t "$CI_APPLICATION_REPOSITORY/web-app-base:latest" .
        docker push "$CI_APPLICATION_REPOSITORY/web-app-base:$WEB_BASE_IMAGE_VER"
        docker push "$CI_APPLICATION_REPOSITORY/web-app-base:latest"
    rules:
      - if: $WEB_BASE_IMAGE_VER 

######## Preview Deployments #########
######################################
db_preview:
  <<: *db_template
  stage: preview
  environment:
    name: preview
    url: https://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  when: manual

redis_preview:
  <<: *redis_template
  stage: preview
  environment:
    name: preview
    url: https://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  when: manual

app_preview:
  <<: *app_template
  stage: preview
  environment:
    name: preview
    url: https://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  when: manual



######## Mainnet Deployments #########
######################################
db_mainnet:
  <<: *db_template
  stage: mainnet
  environment:
    name: mainnet
    url: https://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  needs:
    - job: db_preview
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: manual

redis_mainnet:
  <<: *redis_template
  stage: mainnet
  environment:
    name: mainnet
    url: https://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  needs:
    - job: redis_preview
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: manual

app_mainnet:
  <<: *app_template
  stage: mainnet
  environment:
    name: mainnet
    url: https://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  needs:
    - job: app_preview
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: manual  